#!/bin/bash

# Read the variables from config file
. config

RED='\033[0;31m'
GREEN='\033[0;32m'
NOCOLOR='\033[0m'
DIM='\e[2m'
TICK='\u2713'
CROSS='\u2717'

function cleanup() {
    rm -f "$TMP_DIR"/compiler_stderr "$TMP_DIR"/interpreter_stderr "$TMP_DIR"/output
}

function show() {
    for test in "$TEST_DIR"/*; do
        echo -e "$(basename "$test")$DIM"
        cat "$test"/description.txt
        echo -e "$NOCOLOR"
    done
}

function generate() {
    test="$TEST_DIR"/"$1"
    mkdir -p "$test"

    # Create program.tl file
    [ -f "$test"/program.tl ] || {
        echo -e 'require "ifj21"\n\nfunction main()\n    -- write your program here\nend\n\nmain()' >"$test"/program.tl
        before=$(stat -c %Y "$test"/program.tl)

        # edit the file interactively
        [ "$EDITOR" ] || EDITOR=nano
        $EDITOR "$test"/program.tl

        # If no changes were made, exit
        [[ $(stat -c %Y "$test"/program.tl) -gt $before ]] || {
            echo "Changes discarded, no test was created"
            rm "$test"/program.tl
            rmdir "$TEST_DIR"
            exit 1
        }
    }

    # Create all files
    touch "$test"/input "$test"/return "$test"/description.txt
    # Delete the output, if there is anything
    > "$test"/output

    # If description file is empty
    [ -s "$test"/description.txt ] || {
        echo "The description is missing. Enter it now:"
        read -er && echo "${REPLY}" >"$test"/description.txt
    }

    # Run the compiler
    timeout -k 5s 2s "$COMPILER" <"$test"/program.tl >"$TMP_DIR"/out.IFJcode21 2>"$TMP_DIR"/compiler_stderr
    compilerReturn=$?

    # Did the compiler finish successfully?
    if [ $compilerReturn -eq 0 ]
    then
        # Run the interpreter
        timeout -k 5s 2s "$INTERPRETER" "$TMP_DIR"/out.IFJcode21 <"$test"/input >"$test"/output 2>"$TMP_DIR"/interpreter_stderr
        interpreterReturn=$?
        echo $interpreterReturn > "$test"/return
    else
        echo $compilerReturn > "$test"/return
        touch "$test"/output
    fi
    echo "Reference outputs for $test generated successfully."
}

function run() {
    numTests=0
    numTestsPassed=0

    for test in "$TEST_DIR"/*; do
        passed=''
        expectedReturn="$(cat "$test"/return)"

        # Run the compiler
        timeout -k 5s 2s "$COMPILER" <"$test"/program.tl >"$TMP_DIR"/out.IFJcode21 2>"$TMP_DIR"/compiler_stderr
        compilerReturn=$?

        # Did the compiler finish successfully?
        if [ $compilerReturn -eq 0 ]
        then
            # Run the interpreter
            timeout -k 5s 2s "$INTERPRETER" "$TMP_DIR"/out.IFJcode21 <"$test"/input >"$TMP_DIR"/output 2>"$TMP_DIR"/interpreter_stderr
            interpreterReturn=$?

            # Did the interpreter finish successfully?
            if [ $interpreterReturn -eq 0 ]
            then
                # Does the output match with reference? Expected return must be zero.
                diff --strip-trailing-cr "$TMP_DIR/output" "$test"/output >"$TMP_DIR"/diff_output \
                && [ "$(cat "$test"/return)" -eq 0 ] \
                && passed='1'
            else
                # Does the runtime error match with reference?
                [ $interpreterReturn -eq "$expectedReturn" ] && passed='1'
            fi
        else
            # Does the compiler error match the reference?
            [ $compilerReturn -eq "$expectedReturn" ] && passed='1'
        fi

        if [ $passed ]; then
            echo -e "$GREEN$TICK $(basename "$test")$NOCOLOR"
            numTestsPassed=$((numTestsPassed+1))
        else
            echo -e "$RED$CROSS $(basename "$test")$DIM"

            # Print more detailed error info
            cat "$test"/description.txt

            # What was supposed to happen?
            if [ "$expectedReturn" -eq 0 ]
            then
                if [ $compilerReturn -ne 0 ]
                then
                    # Check for timeout
                    if [ "$compilerReturn" -ne 124 ]
                    then
                        echo "Compiler exited with error $compilerReturn:"
                        cat "$TMP_DIR"/compiler_stderr
                    else
                        echo "The compiler timed out"
                    fi    
                else
                    if [ $interpreterReturn -ne 0 ]
                    then
                        if [ "$interpreterReturn" -ne 124 ]
                        then
                            echo "Interpreter exited with error $interpreterReturn:"
                            cat "$TMP_DIR"/interpreter_stderr
                        else
                            echo "The interpreter timed out"
                        fi
                    else
                        echo Expected output:
                        cat "$test"/output
                        echo Output:
                        cat "$TMP_DIR"/output
                    fi
                fi
            else
                echo "Program was supposed to fail, but with different exit code"
                echo "Expected return: $expectedReturn"
                # Check for timeout
                if [ $compilerReturn -ne 124 ]
                then
                    echo "Compiler return: $compilerReturn"
                else
                    echo "The compiler timed out"
                fi
                
                # Print the intepreter only if the compiler succeeded
                if [ $compilerReturn -eq 0 ] 
                then
                    if [ $interpreterReturn -ne 124 ]
                    then
                        echo "Interpreter return: $interpreterReturn"
                    else
                        echo "The interpreter timed out"
                    fi
                fi
            fi
            echo -ne "$NOCOLOR"
        fi
        numTests=$((numTests+1))
    done

    # After all tests, print summary
    if [ $numTestsPassed -eq $numTests ]
    then
        echo -e "\n$GREEN$TICK ALL TESTS PASSED$NOCOLOR"
    else
        echo -e "\n$RED$CROSS SOME TESTS FAILED ($numTestsPassed/$numTests passed)$NOCOLOR"
    fi
}

[ "$1" ] && [ "$1" = "show" ] && show && exit 0
[ "$1" ] && [ "$1" = "generate" ] && generate "$2" && exit 0

mkdir -p "$TMP_DIR"
make -C "$MAKE_DIR"
run
